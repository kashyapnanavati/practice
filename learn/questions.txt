1.Given a sorted array of position numbers, Find the smallest positive integer value that
  cannot be represented as sum of elements of any subset of given set.
  e.g. arr[] = {1,3,6,10,11,15} ---> output = 2
       arr[] = {1,1,1,1} ---> output 5
       arr[] = {1,1,3,4} ---> output 10
       arr[] = {1,2,5,10,20} --->output 4

2.Search an element in a sorted and rotated aray

3.Write a function rotate(arr[], d, n) such that it rotates arr[] of size n by d elements.

4.Stock buy sell to maximize profit : The cost of a stock on each day is given in an array,
  find the max profit that you can make by buying ans selling in those days. For e.g.,
  if the given array is {100,180,260,310,40,535,695} the max profit can earned by buying
  on day 0 and selling on day 3. Again, buy on day 4 and sell on day 6.
 
5.Given a string you need to print all possible strings that can be made by placing
  spaces (zero or one in between them)
  Input : str[] -->"ABC"
  Output: ABC
          A BC
          AB C
          A B C

6.Find a sorted subsequence of size 3 in linear time, Given arrayy of n integers, find
  3 elements such that a[i] < a[j] < a[k] and i < j < k in O(n) time.
  Input: a[] {12, 11, 10, 5, 6, 2, 30}
  output : {5, 6, 30}

7.Equilibrium index of an array is an index such that the sum of elements at lower indexes
  is equal to sum of elements at higher indexes. Find that.
  Input : {-7, 1, 5, 2, -4, 3, 0}
  Output : 3 (a[0]+a[1]+a[2]  == a[4]+a[5]+a[6])

8.Given an array of size n, find majority element. Majority element is the element that
  apears more than [n/2] times. Assume array is non-empty and majority elem always exist.
  Solve this in O(nlong(n)) and O(n) complexities.

9.You are given a unsorted array with positive and negative elements. You have to find
  the smallest positive number missing from the array in O(n) time using constant extra
  space. You can modify the original array.
  Input : {2,3,7,6,8,-1,-10,15}   ---> Output: 1
  Input : {1,1,0,-1,-2} ---> Output : 2
  (Note : compare with question 1 and see/understand the different approacehs)

10.Given positive integer n, break it into the sum of atleast two positive integers and
   maximize the product of those integers. Return the max product you can get.
   Input: 2 Output : 1 (2 = 1+1-->1*1 = 1)
   Input 10 Output : 36 (10 = 3+3+4 --> 3*3*4 = 36)

11.Calculate XOR from 1 to n.

12.Given an integer array of n integers, find sum of bit differences in all pairs that
   can be formed from array elements. Bit difference of a pair (x, y) is count of
   different bits at same positions in binary representations of x and y. 
   For example, bit difference for 2 and 7 is 2. Binary representation of 2 is 010
   and 7 is 111 ( first and last bits differ in two numbers).

13.Given an array of integers. find the maximum XOR subarray value in given array.
   Expected time complexity O(n).
   Examples:
   Input: arr[] = {1, 2, 3, 4}
   Output: 7
   The subarray {3, 4} has maximum XOR value

   Input: arr[] = {8, 1, 2, 12, 7, 6}
   Output: 15
   The subarray {1, 2, 12} has maximum XOR value

   Input: arr[] = {4, 6}
   Output: 6
   The subarray {6} has maximum XOR value

14.Print a square matrix in spiral form

15.Print odd/even using multiple threads

16.Write C program to print all permutations of a given string

17.Impplement your own MALLOC function in C

18.Find a median from a stream of flowing numbers
   (Use 2 heap based solution)

19.Implement you own atoi and itoa

20.Given a char array find a possible solution like this,
   input = "ABC"
   output =A, AB, ABC, B, BC, C

21.Write a function to find the angle between the minute and hour hand in
   an analog clock.

22.Given a keypad as shown in diagram, and a n digit number, list all words
   which are possible by pressing these numbers.




/******************************************/
 List of Bit Manipulation Questions :
/******************************************/

1.Find the Index of highest bit set of a 32 bit number (without any loops)
  Or Find the index left most bit (or MSB) which is set in a number
  int findMSB(int x) {
	int i = 0;
	x & 0xFFFF0000 && (i += 16, x >>= 16), 
	x & 0xFF00 && (i += 8, x >>= 8), 
	x & 0xF0 && (i += 4, x >>= 4), 
	x & 0x0C && (i += 2, x>>= 2), 
	x & 2 && (i += 1); 
	return i;
  }

2.Find the right most set bit number of a given number
  I/P   0xA  O/P  2
  (n & ~(n-1))
  or Find the position of right most set bit of a given number
  I/P 0xA O/P 2 
  Ans : n ^ (n&(n-1))


3.Find the right most set bit index of a given number
 
4.Write a one line C function to return position of first 1 from right to left,
  in binary repres entation of an Integer. 
  I/P    18,   Binary Representation 010010  ---> O/P   2
  I/P    19,   Binary Representation 010011  ---> O/P   1
  (log2(n&-n)+1)

5.Write a C function that unsets the rightmost set bit of an integer.
  Examples:
  Input:  12 (00...01100)  --->  Output: 8 (00...01000)
  Input:  7 (00...00111)   --->  Output: 6 (00...00110)
  (n & n-1)

6.Find XOR of 2 numbers without using XOR operator
   (x | y) & (~x | ~y)

7.Find MIN and MAX of two numbers (a and b) Or return min and max from a and b without
   comparator operator.

8.Check if given number is Fibonacci or not ? (without computing fibonacci numbers)
   
9.Test if given number is power of 2.

10.Give a fastest way to multiply a number by 7.
   ((n << 3) - n)

11. Check if number is little Endian or Big Endian
    and convert numbder from one endianness to other endianness

12.Reverse Bits of given integer in O(1) time. 
